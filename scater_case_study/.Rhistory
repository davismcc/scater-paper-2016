theme(legend.position = "bottom")
## RUVg
cIdx <- (fData(scDataRUV)$is_feature_control & fData(scDataRUV)$n_cells_exprs >= 10)
ruvg <- RUVg(counts(scDataRUV), cIdx, k = 1, isLog = FALSE)
norm_counts(scDataRUV) <- ruvs$normalizedCounts
exprs(scDataRUV) <- edgeR::cpm.default(norm_counts(scDataRUV), log = TRUE,
prior.count = scDataRUV@logExprsOffset)
plt_norm_ruvg <- plotPCA(
scDataRUV, exprs_values = "exprs", shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features",
scale_features = TRUE) +
ggtitle(paste("PCA - RUVg normalisation: k =", 1)) +
theme(legend.position = "bottom")
figplot3 <- cowplot::plot_grid(plt_pca_endog_norm, plt_cond_norm_resid,
plt_rbe_norm, plt_norm_ruvs,
labels = letters, ncol = 2,
rel_heights = c(0.75, 1), label_size = 18)
figplot3
plt_sf_norm_resid <- plotPCA(
scDataQC, exprs_values = "norm_exprs_resid", shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features",
scale_features = TRUE) +
ggtitle("PCA - size-factor normalisation residuals") +
theme(legend.position = "bottom")
multiplot(plt_cond_norm, plt_sf_norm_resid)
plt_sf_norm_resid <- plt_sf_norm_resid +
theme(legend.position = "none")
figplot3 <- cowplot::plot_grid(plt_pca_endog_norm, plt_sf_norm_resid,
plt_rbe_norm, plt_norm_ruvs,
labels = letters, ncol = 2,
rel_heights = c(0.75, 1), label_size = 18)
figplot3
plt_pca_endog_norm <- plt_pca_endog_norm +
theme(legend.position = "none")
figplot3 <- cowplot::plot_grid(plt_pca_endog_norm, plt_sf_norm_resid,
plt_rbe_norm, plt_norm_ruvs,
labels = letters, ncol = 2,
rel_heights = c(0.75, 1), label_size = 18)
figplot3
cowplot::save_plot("../figures/figure5.pdf", figplot3, ncol = 2, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.2)
cowplot::save_plot("../figures/figure5.png", figplot3, ncol = 2, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.2)
cowplot::save_plot("../figures/figure5.jpg", figplot3, ncol = 2, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.2, dpi = 350)
cowplot::save_plot("../figures/figure3.pdf", figplot1, ncol = 3, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.4)
cowplot::save_plot("../figures/figure3.png", figplot1, ncol = 3, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.4)
cowplot::save_plot("../figures/figure3.jpg", figplot1, ncol = 3, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.4, dpi = 350)
scData$well_type <- "single cell"
scData$well_type[scData$sample_type == "blank (empty site) control"] <-
"blank control"
scData$well_type[scData$sample_type == "bulk control from patient A"] <-
"bulk control"
scData$well_type[scData$sample_type == "bulk control from patient B"] <-
"bulk control"
p1 <- plot( scData, colour_by = "well_type", exprs_values = "counts")
p2 <- plotPCA( scData, shape_by = "sample_type",
pca_data_input = "pdata", detect_outliers = TRUE,
selected_variables = c("cdna_recovered_in_ng_per_ul_no_miss",
"pct_counts_top_100_features",
"total_features",
"pct_counts_feature_controls",
"n_detected_feature_controls",
"log10_counts_endogenous_features",
"log10_counts_feature_controls"))
p3 <- plotQC( scData[fData( scData )$use, pData( scData )$use],
type = "highest-expression",
col_by_variable = "sample_type" ) + coord_cartesian(xlim = c(0, 6))
p4 <- plotQC(scData, type = "exprs")
p5 <- plotQC( scData[fData( scData )$use, scData$use],
type = "explanatory-variables",
variables = c("pct_counts_top_100_features", "total_features",
"c1_machine",
"n_detected_feature_controls",
"log10_counts_endogenous_features",
"sample_type") ) +
xlab(expression(paste(R ^ 2, " (% variance explained; log10-scale)"))) +
theme(legend.position = "bottom", legend.text = element_text(size = 7))
p6 <- plotQC( scData[fData( scData )$use, scData$use],
type = "find-pcs", variable = "c1_machine")
figplot1 <- cowplot::plot_grid(p1, p2, p3, p4, p5, p6,
labels = letters, ncol = 2,
label_size = 20)
cowplot::save_plot("../figures/figure3.pdf", figplot1, ncol = 3, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.4)
cowplot::save_plot("../figures/figure3.png", figplot1, ncol = 3, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.4)
cowplot::save_plot("../figures/figure3.jpg", figplot1, ncol = 3, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.4, dpi = 350)
figplot1 <- cowplot::plot_grid(p1, p2, p3, p4, p5, p6,
labels = letters, ncol = 3,
label_size = 20)
cowplot::save_plot("../figures/figure3.pdf", figplot1, ncol = 3, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.4)
cowplot::save_plot("../figures/figure3.png", figplot1, ncol = 3, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.4)
cowplot::save_plot("../figures/figure3.jpg", figplot1, ncol = 3, nrow = 2,
base_height = 3.5, base_aspect_ratio = 1.4, dpi = 350)
getwd()
ls()
# Chunk 1
# setwd( "~/Dropbox/scater_case_study/" )
# setwd( "~/Google\ Drive/Manuscripts/scater_paper_nov-2015/scater_case_study/" )
library( "scater" )
library( "EBImage" )
library( "scran" )
library( "RUVSeq" )
# Chunk 2
reads <- as.matrix( read.csv( "reads.csv", row.names = 1 ) )
# Chunk 3
cells <- AnnotatedDataFrame( read.csv( "cells.csv", row.names = 1 ) ) # row names match column names in reads
genes <- AnnotatedDataFrame( read.csv( "genes.csv", row.names = 1 ) ) # row names match row names in reads
scData <- newSCESet( countData = reads, phenoData = cells, featureData = genes, lowerDetectionLimit = 3 )
pData( scData )[1:3, 1:2] # view some sample meta-data
# Chunk 4
fData( scData )[1:3, 1:2] # view some feature meta-data
# Chunk 5
spikes <- grepl( "ERCC-", row.names( scData ) ) # ERCC spike-ins
blanks <- scData$sample_type == "blank (empty site) control" # negative/background controls
bulks <- grepl( "bulk control", scData$sample_type ) # samples of several hundred cells
scData <- calculateQCMetrics(
scData, feature_controls = list( spikes = spikes ),
cell_controls = list( bulks = bulks, blanks = blanks ) )
# Chunk 6
scData$use <- (scData$cdna_recovered_in_ng_per_ul > 0.5 & #sufficient cDNA per cell
scData$pct_counts_feature_controls < 1 & # sufficient endogenous RNA
!scData$total_counts < 1e5 & # sufficient reads mapped to features
!scData$filter_on_total_features & # remove cells with unusual numbers of genes
!scData$is_cell_control # controls shouldn't be used in downstream analysis
)
# Chunk 7
plot( scData, block1 = "sample_type", block2 = "c1_machine", colour_by = "use",
exprs_values = "counts")
# Chunk 8
plotPCA( scData, colour_by = "use", shape_by = "sample_type" )
plotPCA( scData[, grep("cell", scData$sample_type)], colour_by = "use",
shape_by = "sample_type")
# Chunk 9: pca-qc-metrics
## PCA on the phenoData cannot handle missing values
## for the exercise here we thus set cdna_recovered_in_ng_per_ul to 100 where
## there are NA values actually (creating a new dummy variable)
cdna_temp <- scData$cdna_recovered_in_ng_per_ul
cdna_temp[is.na(cdna_temp)] <- 100
scData$cdna_recovered_in_ng_per_ul_no_miss <- cdna_temp
scData <- plotPCA( scData, size_by = "use", shape_by = "sample_type",
pca_data_input = "pdata", detect_outliers = TRUE,
return_SCESet = TRUE,
selected_variables = c("cdna_recovered_in_ng_per_ul_no_miss",
"pct_counts_top_100_features",
"total_features",
"pct_counts_feature_controls",
"n_detected_feature_controls",
"log10_counts_endogenous_features",
"log10_counts_feature_controls"))
plotReducedDim(scData, colour_by = "outlier", shape_by = "use", ncomponents = 3)
plotReducedDim(scData[, grep("cell", scData$sample_type)],
colour_by = "outlier", shape_by = "use", ncomponents = 3)
plotPCA( scData[, grep("cell", scData$sample_type)], colour_by = "outlier",
shape_by = "use", pca_data_input = "pdata")
plotDiffusionMap( scData[, grep("cell", scData$sample_type)],
colour_by = "outlier", shape_by = "use",
pca_data_input = "pdata")
# Chunk 10: pca-difmap-outliers
plotPCA( scData[, grep("cell", scData$sample_type)], ncomponents = 3,
shape_by = "use", pca_data_input = "pdata", colour_by = "outlier")
p1 <- plotPCA( scData, colour_by = "use", shape_by = "sample_type",
size_by = "outlier" ) + ggtitle("PCA")
p2 <- plotDiffusionMap( scData, colour_by = "use", shape_by = "sample_type",
size_by = "outlier" ) + ggtitle("Diffusion map")
multiplot(p1, p2, cols = 2)
# Chunk 11: pca-difmap-ercc-genes
p1 <- plotPCA( scData, feature_set = fData(scData)$is_feature_control,
colour_by = "use", shape_by = "sample_type",
size_by = "outlier" ) + ggtitle("PCA")
p2 <- plotDiffusionMap( scData, feature_set = fData(scData)$is_feature_control,
colour_by = "use", shape_by = "sample_type",
size_by = "outlier" ) + ggtitle("Diffusion map")
multiplot(p1, p2, cols = 2)
# Chunk 12: pca-diffmap-ccn-genes
cell_cycle_genes <- !is.na(fData(scData)$cell_cycle_phase)
sum(cell_cycle_genes)
most_exprs_ccycle <- which(cell_cycle_genes &
fData(scData)$total_feature_counts > 100000)
knitr::kable(fData(scData)[most_exprs_ccycle,] )
p1 <- plotPCA(scData, feature_set = cell_cycle_genes,
colour_by = featureNames(scData)[most_exprs_ccycle[8]],
shape_by = "sample_type",
size_by = "use" ) + ggtitle("PCA")
p2 <- plotDiffusionMap( scData, feature_set = cell_cycle_genes,
colour_by = featureNames(scData)[most_exprs_ccycle[8]],
shape_by = "sample_type",
size_by = "use" ) + ggtitle("Diffusion map")
multiplot(p1, p2, cols = 2)
# Chunk 13
plotPhenoData( scData, aesth = aes_string( x = "cdna_recovered_in_ng_per_ul",
y = "total_features", colour = "use" ) )
# Chunk 14
imageQC <- function(cell) {
require( "EBImage" )
pass <- TRUE # if the cell should be passed or failed
im <- readImage( paste( cell, ".tif", sep = "" ) ) # read in image TIFF for cell of interest
im <- thresh( im, w = 20, h = 20, offset = 0.1 ) # convert to binary fluorescence matrix
display( im, method = "raster" ) # view fluorescent spot(s)
im <- bwlabel(  opening(  im,  makeBrush( 3, "gaussian" ) ) ) # label clusters of glowing spots
cl <- sort( table( im )[-1], decreasing = TRUE ) # pixels per fluorescent spot
if ( sum( cl > 1e2 ) != 1 ) pass <- FALSE # pass if a single spot greater than 100 pixels
sh <- prcomp( which( im == names( cl )[1],  arr.ind = TRUE ) )  # a non-circular shape may be a doublet/dividing cell
if ( sh$sdev[1] ^ 2/sum( sh$sdev ^ 2 ) > 0.75 ) pass <- FALSE
pass
}
pData( scData )["cellB_1_04", "use"] <-
(pData( scData )["cellB_1_04", "use"] & imageQC( "cellB_1_04" ) )
# Chunk 15
reps <- scData$c1_machine # the machine replicates
is_exprs(scData) <- counts(scData) >= 3
exprsThresh <- sapply( 1:2,
function(r) apply( is_exprs( scData )[, scData$use & reps == r], 1,
function(x) sum( x ) >= 3 ) )
fData( scData )$use <- (apply( exprsThresh, 1, all ) & # endogenous genes above the threshold are used downstream
!fData( scData )$is_feature_control_spikes)
# Chunk 16
plotQC(scData, type = "exprs")
# Chunk 17
oo <- order(unlist(dplyr::summarise(dplyr::group_by(fData(scData), gene_biotype),
median(log10_total_feature_counts))[,2]), decreasing = TRUE)
fData(scData)$biotype <- factor(fData(scData)$gene_biotype,
levels = levels(fData(scData)$gene_biotype)[oo])
plotFeatureData(scData, aes(x = biotype, y = log10_total_feature_counts),
theme_size = 6) +
theme(axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5))
# Chunk 18: append-gene-symbols
featureNames(scData) <- paste(fData(scData)$hgnc_symbol, featureNames(scData),
sep = "_")
# Chunk 19
plotQC( scData[fData( scData )$use, pData( scData )$use],
type = "highest-expression",
col_by_variable = "sample_type" )
# Chunk 20: pca-diffmap-normalisation
plotPCA( scData[fData( scData )$use, scData$use],  # only plot genes and cells of interest
colour_by = "sample_type",
shape_by = "c1_machine",
size_by = "total_features" )
plotDiffusionMap( scData[fData( scData )$use, scData$use], ntop = 5000,
colour_by = "sample_type",
shape_by = "c1_machine",
size_by = "total_features" )
# Chunk 21: plotqc-expl-vars
plotQC( scData[fData( scData )$use, scData$use],
type = "explanatory-variables",
variables = c("pct_counts_top_100_features", "total_features",
"pct_counts_feature_controls", "c1_machine",
"n_detected_feature_controls",
"log10_counts_endogenous_features",
"log10_counts_feature_controls", "sample_type") )
# Chunk 22
p1 <- plotQC( scData[fData( scData )$use, scData$use],
type = "find-pcs", variable = "total_features" )
p2 <- plotQC( scData[fData( scData )$use, scData$use],
type = "find-pcs", variable = "sample_type" )
multiplot(p1, p2, cols = 2)
# Chunk 23: plot-qc-pcs-c1-machine
scData$c1_machine <- as.factor(scData$c1_machine)
p1 <- plotQC( scData[fData( scData )$use, scData$use],
type = "find-pcs", variable = "c1_machine" )
p2 <- plotQC( scData[fData( scData )$use, scData$use],
type = "find-pcs", variable = "cdna_recovered_in_ng_per_ul")
multiplot(p1, p2, cols = 2)
# Chunk 24
plotQC( scData[fData( scData )$use, scData$use],
type = "expl", method = "pairs",
variables = c("pct_counts_top_100_features", "total_features",
"pct_counts_feature_controls", "c1_machine",
"n_detected_feature_controls",
"log10_counts_endogenous_features",
"log10_counts_feature_controls", "sample_type"),
theme_size = 6)
# Chunk 25: pca-norm-plots
## subset to form a QC's version of the data
scDataQC <- filter(scData, use)
scDataQC <- scDataQC[fData(scData)$use | fData(scData)$is_feature_control,]
ercc_genes <- fData(scDataQC)$is_feature_control
endog_genes <- !ercc_genes
## size factor normalisation with scran
qclust <- quickCluster(scDataQC, min.size = 20)
scDataQC <- computeSumFactors(scDataQC, sizes = 10, clusters = qclust)
summary(scDataQC$size_factor)
scDataQC <- normalise(scDataQC)
scDataQC_spikenorm <- computeSumFactors(scDataQC, sizes = 10,
get.spikes = TRUE)
summary(scDataQC_spikenorm$size_factor)
scDataQC_spikenorm <- normalise(scDataQC_spikenorm)
set_exprs(scDataQC, "ercc_norm_exprs") <- exprs(scDataQC_spikenorm)
set_exprs(scDataQC, "endog_norm_exprs") <- exprs(scDataQC)
## subset again so that only endogenous genes are used
scDataQC <- scDataQC[fData(scDataQC)$use,]
plt_pca_ercc_norm <- plotPCA(
scDataQC, exprs_values = "ercc_norm_exprs", size_by = "total_features",
colour_by = "sample_type", shape_by = "c1_machine") +
ggtitle("PCA - ERCC size-factor normalisation") +
theme(legend.position = "bottom")
plt_pca_endog_norm <- plotPCA(
scDataQC, exprs_values = "endog_norm_exprs", size_by = "total_features",
colour_by = "sample_type", shape_by = "c1_machine") +
ggtitle("PCA - endogenous size-factor normalisation") +
theme(legend.position = "bottom")
multiplot(plt_pca_ercc_norm, plt_pca_endog_norm, cols = 2)
# Chunk 26: pca-norm-plot-find-pcs
scDataQC$c1_machine <- as.factor(scDataQC$c1_machine)
plotQC( scDataQC, type = "find-pcs", variable = "c1_machine")
# Chunk 27: custom-norm-exprs
rp <- scData$c1_machine[scData$use] # replicates
mn <- sapply( 1:2,  # mean log expression per replicate
function(r) rowMeans(exprs( scData )[fData( scData )$use,
scData$use][, rp == r]))
exprsNorm <- counts( scData )[fData( scData )$use, pData( scData )$use] # read counts to normalise
wn <- floor( 0.05*nrow( scData ) ) # consider a sliding window of 10% of genes
for (r in 1:2) { # normalise per replicate
exprsNorm[, rp == r] <- t( sapply( row.names( exprsNorm ), function(g){
nh <- head( sort( abs( mn[, r] - mn[g, r] ) ), wn ) # neighbourhood of similarly expressing genes
nh <- exprsNorm[names( nh ), rp == r]
nh <- log2( t( t( nh ) / colSums( nh ) ) * 1e5 + 1 ) # locally normalise
nh <- nh - mean( nh ) # locally standardise
nh <- nh / mean( abs( nh ) )
nh[1, ]
} ) )
}
### add normalised expression values to SCESet object and make PCA plot
norm_exprs(scDataQC) <- exprsNorm
plt_cond_norm <- plotPCA(
scDataQC, exprs_values = "norm_exprs", shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features",
scale_features = FALSE) +
ggtitle("PCA - expression conditional normalisation") +
theme(legend.position = "bottom")
plt_cond_norm
# Chunk 28: pca-norm-plot-find-pcs-2
plotQC( scDataQC, type = "find-pcs", variable = "c1_machine",
exprs_values = "norm_exprs")
# Chunk 29: regress-factors-norm
design <- model.matrix(~scDataQC$log10_counts_endogenous_features +
scDataQC$pct_counts_top_100_features +
scDataQC$pct_counts_feature_controls +
scDataQC$c1_machine)
set_exprs(scDataQC, "norm_exprs_resid") <- norm_exprs(
normaliseExprs(scDataQC, design = design,
method = "none", exprs_values = "exprs",
return_norm_as_exprs = FALSE) )
plt_sf_norm_resid <- plotPCA(
scDataQC, exprs_values = "norm_exprs_resid", shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features",
scale_features = TRUE) +
ggtitle("PCA - size-factor normalisation residuals") +
theme(legend.position = "bottom")
plt_sf_norm_resid
# Chunk 30: regress-factors-norm-2
design2 <- model.matrix(~scDataQC$log10_counts_endogenous_features +
scDataQC$pct_counts_top_100_features +
scDataQC$pct_counts_feature_controls +
scDataQC$log10_counts_feature_controls)
set_exprs(scDataQC, "norm_exprs_resid2") <- norm_exprs(
normaliseExprs(scDataQC, design = design2,
method = "none", exprs_values = "exprs",
return_norm_as_exprs = FALSE) )
plt_cond_norm_resid2 <- plotPCA(
scDataQC, exprs_values = "norm_exprs_resid2", shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features",
scale_features = FALSE) +
ggtitle("PCA - size-factor normalisation residuals technical factors") +
theme(legend.position = "bottom")
design3 <- model.matrix(~scDataQC$log10_counts_endogenous_features +
scDataQC$pct_counts_top_100_features +
scDataQC$pct_counts_feature_controls +
scDataQC$log10_counts_feature_controls +
scDataQC$cdna_recovered_in_ng_per_ul_no_miss)
set_exprs(scDataQC, "norm_exprs_resid3") <- norm_exprs(
normaliseExprs(scDataQC, design = design3,
method = "none", exprs_values = "exprs",
return_norm_as_exprs = FALSE) )
plt_cond_norm_resid3 <- plotPCA(
scDataQC, exprs_values = "norm_exprs_resid3", shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features",
scale_features = FALSE) +
ggtitle("PCA - size-factor normalisation residuals incl cDNA") +
theme(legend.position = "bottom")
multiplot(plt_cond_norm_resid2, plt_cond_norm_resid3)
# Chunk 31: limma-remove-batch
design_rbe <- model.matrix(~as.character(scDataQC$sample_type))
rbe_norm_exprs <- removeBatchEffect(exprs(scDataQC), batch = scDataQC$c1_machine,
design = design_rbe)
rbe_norm_exprs <- removeBatchEffect(get_exprs(scDataQC, "endog_norm_exprs"),
batch = scDataQC$c1_machine,
design = design_rbe)
set_exprs(scDataQC, "norm_exprs_rbe") <- rbe_norm_exprs
plt_rbe_norm <- plotPCA(
scDataQC, exprs_values = "norm_exprs_rbe", shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features") +
ggtitle("PCA - removeBatchEffect normalisation") +
theme(legend.position = "bottom")
plt_rbe_norm
# Chunk 32: limma-remove-batch-pcs-corr
plotQC(scDataQC, type = "find-pcs", variable = "c1_machine",
exprs_values = "norm_exprs_rbe")
# Chunk 33: ruv-seq-s
# One approach to finding and removing hidden, unwanted sources of variability is
# the `RUVSeq` package.
scDataRUV <- filter(scData, use)
scDataRUV <- scDataRUV[fData(scData)$use | fData(scData)$is_feature_control,]
scIdx <- matrix(-1, ncol = max(table(scDataRUV$sample_type)), nrow = 2)
scIdx[1,] <- which(scDataRUV$sample_type == "cell from patient B")
tmp <- which(scDataRUV$sample_type == "cell from patient A")
scIdx[2, 1:length(tmp)] <- tmp
# cIdx <- (fData(scDataRUV)$is_feature_control & fData(scDataRUV)$n_cells_exprs >= 10)
## Running RUVs
cIdx <- rownames(scDataRUV)
ruv_list <- list()
for (k in 1:9) {
ruvs <- RUVs(counts(scDataRUV), cIdx, k = k,
scIdx = scIdx, isLog = FALSE)
norm_counts(scDataRUV) <- ruvs$normalizedCounts
exprs(scDataRUV) <- edgeR::cpm.default(norm_counts(scDataRUV), log = TRUE,
prior.count = scDataRUV@logExprsOffset)
plt_norm_ruv <- plotPCA(
scDataRUV, exprs_values = "exprs", shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features",
scale_features = TRUE) +
ggtitle(paste("PCA - RUVs normalisation: k =", k)) +
theme_bw(8)
ruv_list[[k]] <- plt_norm_ruv
}
figplot_ruv <- cowplot::plot_grid(plotlist = ruv_list[1:8], labels = letters[1:8], ncol = 2)
figplot_ruv
figplot_ruv <- cowplot::plot_grid(plotlist = ruv_list, labels = letters[1:9])
cowplot::save_plot("../figures/supplement/ruvs_figure.png", figplot_ruv,
ncol = 3, nrow = 3, base_height = 5, base_aspect_ratio = 0.9)
# Chunk 34: ruv-seq-s-qc-plots
plotQC(scDataRUV, type = "explanatory-variables")
plotQC(scDataRUV, type = "find-pcs", variable = "sample_type")
# Chunk 35: ruvseq-red-dim-k6
ruvs <- RUVs(counts(scDataRUV), cIdx, k = 6, scIdx = scIdx, isLog = FALSE)
reducedDimension(scDataRUV) <- ruvs$W
plotReducedDim(scDataRUV, shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features") + theme_bw()
# Chunk 36: ruv-seq-g
# One approach to finding and removing hidden, unwanted sources of variability is
# the `RUVSeq` package.
## Running RUVs
cIdx <- fData(scDataRUV)$is_feature_control
ruvg_list <- list()
for (k in 1:9) {
ruvs <- RUVg(counts(scDataRUV), cIdx, k = k, isLog = FALSE)
norm_counts(scDataRUV) <- ruvs$normalizedCounts
exprs(scDataRUV) <- edgeR::cpm.default(norm_counts(scDataRUV), log = TRUE,
prior.count = scDataRUV@logExprsOffset)
plt_norm_ruv <- plotPCA(
scDataRUV, exprs_values = "exprs", shape_by = "c1_machine",
colour_by = "sample_type", size_by = "total_features",
scale_features = TRUE) +
ggtitle(paste("PCA - RUVg normalisation: k =", k)) +
theme_bw(8)
ruvg_list[[k]] <- plt_norm_ruv
}
figplot_ruvg <- cowplot::plot_grid(plotlist = ruvg_list[1:8], labels = letters[1:8],
ncol = 2)
figplot_ruvg
figplot_ruvg <- cowplot::plot_grid(plotlist = ruvg_list, labels = letters[1:9])
cowplot::save_plot("../figures/supplement/ruvg_figure.png", figplot_ruv,
ncol = 3, nrow = 3, base_height = 5, base_aspect_ratio = 0.9)
# Chunk 37: ruv-g-qc-plots
plotQC(scDataRUV, type = "explanatory-variables")
plotQC(scDataRUV, type = "find-pcs", variable = "sample_type")
scDataRUV$c1_machine <- as.factor(scDataRUV$c1_machine)
plotQC(scDataRUV, type = "find-pcs", variable = "c1_machine")
# Chunk 38: de-testing
library( "qvalue" )
sm <- scDataQC$sample_type # the two samples
de <- data.frame( t( apply( norm_exprs(scDataQC) > 0, 1, # test change in expression frequency
function( y ) coef(summary(glm(y ~ sm, family = "binomial" ) ) )[2, c(1,4)])),  check.names = FALSE)
de$qvalue <- qvalue( de[, "Pr(>|z|)"], fdr.level = 0.05 )$qvalues # control for false disovery rate
de <- de[order( de$qvalue, decreasing = FALSE ), ] # order by global statistical evidence
knitr::kable(head( de ))
# Chunk 39: plot-exprs-de
plotExpression(scDataQC, rownames(de)[1:6], x = "sample_type", ncol = 3)
plotExpression(scDataQC, rownames(de)[1:6], ncol = 3, exprs_values = "counts",
x = "sample_type", colour_by = "log10_counts_endogenous_features")
plotExpression(scDataQC, rownames(de)[1:6], exprs_values = "norm_exprs",
x = "sample_type", colour_by = "total_features",
shape_by = "c1_machine", ncol = 3)
# Chunk 40
library( "mclust" )
coexprsA <- cor( t( norm_exprs(scDataQC)[row.names(de)[de$qvalue < 0.05],
sm == "cell from patient A"] ),  # rank coexpression
method = "spearman" )
coexprsA <- data.frame( cmdscale( (1 - coexprsA) / 2 ) ) # multidimensional scaling of the coexpression
clustA <- Mclust( coexprsA, modelNames = "VVV" ) # model based clustering of the differentially expressed genes
coexprsB <- cor( t( norm_exprs(scDataQC)[row.names(de)[de$qvalue < 0.05],
sm == "cell from patient B"] ),  # repeat
method = "spearman" )
coexprsB <- data.frame( cmdscale( (1 - coexprsB) / 2 ) )
clustB <- Mclust( coexprsB, modelNames = "VVV" )
gns <- fData( scDataQC )[row.names( de )[de$qvalue < 0.05], "hgnc_symbol"] # differentially expressed genes' symbols
cls <- c( "firebrick", "grey30" )[clustB$classification] # colour by clustering
eff <- rank( de$Estimate[de$qvalue < 0.05] ) / 60 # size by relative expression in patient B
par( mfrow = c( 2, 1 ) )
plot( clustA, what = "density", bty = "n", xlab = "patient A dimension one",  ylab = "patient A dimension two" )
text( coexprsA[, 1], coexprsA[, 2], gns, cex = eff, col = cls )
plot( clustB, what = "density", bty = "n", xlab = "patient B dimension one",  ylab = "patient B dimension two" )
text( coexprsB[, 1], coexprsB[, 2], gns, cex = eff, col = cls )
# Chunk 41
sessionInfo()
